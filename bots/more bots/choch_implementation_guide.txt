// CHOCH TRACKING IMPLEMENTATION GUIDE

// 1. The CHOCHModifiedPosition structure is already defined (lines ~154-158):
struct CHOCHModifiedPosition {
    ulong ticket;       // Position ticket
    string symbol;      // Symbol of the position
    datetime modifiedTime; // When the position was modified
    bool valid;         // Whether this record is valid
};

// 2. The global array chochModifiedPositions is already defined (line ~161):
CHOCHModifiedPosition chochModifiedPositions[MAX_CHOCH_MODIFIED_POSITIONS];

// 3. The StoreCHOCHModifiedPosition function is already implemented (lines ~5309-5345):
void StoreCHOCHModifiedPosition(ulong ticket, string symbol)
{
   // Find an empty slot or the oldest entry to replace
   int oldestIndex = 0;
   datetime oldestTime = TimeCurrent();
   bool emptySlotFound = false;
   
   for(int i=0; i<MAX_CHOCH_MODIFIED_POSITIONS; i++) {
      // If this position is already in the array, just update its time
      if(chochModifiedPositions[i].ticket == ticket) {
         chochModifiedPositions[i].modifiedTime = TimeCurrent();
         Print("[CHOCH_TRACKING] Updated existing CHOCH-modified position record for ticket ", ticket);
         return;
      }
      
      // Find empty slot
      if(chochModifiedPositions[i].ticket == 0) {
         emptySlotFound = true;
         oldestIndex = i;
         break;
      }
      
      // Track oldest entry in case we need to replace it
      if(chochModifiedPositions[i].modifiedTime < oldestTime) {
         oldestTime = chochModifiedPositions[i].modifiedTime;
         oldestIndex = i;
      }
   }
   
   // Store the position in the array
   chochModifiedPositions[oldestIndex].ticket = ticket;
   chochModifiedPositions[oldestIndex].symbol = symbol;
   chochModifiedPositions[oldestIndex].modifiedTime = TimeCurrent();
   
   Print("[CHOCH_TRACKING] Stored CHOCH-modified position ", ticket, " for symbol ", symbol, 
         (emptySlotFound ? " in empty slot" : " replacing oldest entry"));
}

// 4. The IsPositionCHOCHModified function is already implemented (lines ~5350-5358):
bool IsPositionCHOCHModified(ulong ticket)
{
   for(int i=0; i<MAX_CHOCH_MODIFIED_POSITIONS; i++) {
      if(chochModifiedPositions[i].ticket == ticket) {
         return true;
      }
   }
   return false;
}

// 5. The OnTradeTransaction function is already using IsPositionCHOCHModified (lines ~5054-5058 and ~5078-5082):
// For profitable trades:
if(IsPositionCHOCHModified(posTicket)) {
   // This was a position with a CHOCH-modified stop loss that closed with profit
   // Record it as a success in the CHOCH tracking
   UpdateCHOCHSuccess(symbol, true);
   Print("[CHOCH_TRACKING] CHOCH-modified position closed with profit - recorded as success");
}

// For losing trades:
if(IsPositionCHOCHModified(posTicket)) {
   // This was a position with a CHOCH-modified stop loss that got hit
   // Record it as a failure in the CHOCH tracking
   UpdateCHOCHSuccess(symbol, false);
   Print("[CHOCH_TRACKING] CHOCH-modified stop loss was hit - recorded as failure");
}

// 6. WHAT'S MISSING: We need to add StoreCHOCHModifiedPosition calls in the ModifyStopsOnCHOCH function
// Add these calls after the UpdateCHOCHSuccess calls in both buy and sell position sections:

// For buy positions (around line 5273):
UpdateCHOCHSuccess(symbol, true); // Initially mark as success, will update to failure if SL hit

// Add this right after the above line:
StoreCHOCHModifiedPosition(ticket, symbol);

// For sell positions (around line 5300):
UpdateCHOCHSuccess(symbol, true); // Initially mark as success, will update to failure if SL hit

// Add this right after the above line:
StoreCHOCHModifiedPosition(ticket, symbol);

// 7. MANUAL IMPLEMENTATION STEPS:
// a. Open intelligent.mq5 in MetaEditor
// b. Go to line 5273 (buy position section) and add StoreCHOCHModifiedPosition(ticket, symbol); after UpdateCHOCHSuccess
// c. Go to line 5300 (sell position section) and add StoreCHOCHModifiedPosition(ticket, symbol); after UpdateCHOCHSuccess
// d. Save the file and compile to verify there are no errors

// This completes the implementation of multi-pair adaptive CHOCH tracking functionality.
